# dframe = The Dataframe
# tolerance_minor = What is rare class tolerance limit in %
# min_nrow_tolerance = Minimum row tolerance limit.It can be manually judged based on the no. of records on two classes
# IsNeeded = Whether oversampling or under-sampling is needed or not

balancing.set <- function(dframe,Y,tolerance_minor = 0.20,min_nrow_tolerance,IsNeeded = 'N'){
  if(IsNeeded == 'Y')
  {
    classes <- levels(unique(dframe[ ,Y]))
    print(classes)  
    
    # Creating vector of different classes with ratio
    class_vector <- as.vector(prop.table(table(dframe[,Y])))
    
    # Minor class details
    min_class_index <- which.min(class_vector)
    min_class_nrow <- as.vector(table(dframe[,Y])[min_class_index])
    
    # major class details
    max_class_index <- which.max(class_vector)  
    max_class_nrow <- as.vector(table(dframe[,Y])[max_class_index])
    
    # Finding the times to be multiply
    multiply_times <- round(max_class_nrow/min_class_nrow)
    
    # Minority class data frame
    minority_class <- subset(dframe,dframe[ ,Y]==classes[min_class_index])
    
    # Majority class data frame
    majority_class <- subset(dframe,dframe[ ,Y]==classes[max_class_index])
    
    print(class_vector)
    print(min_class_index)
    print(min_class_nrow)
    #str(minority_class)
    
    # Checking the minority class with the tolerance ratio
    if((class_vector[min_class_index] <= tolerance_minor) & (min_class_nrow < min_nrow_tolerance)){
      print('I have to do oversampling of the minority class')  
      
      # Adding the sampling rate
      sam.rate <- multiply_times
      
      # Generating the oversampling with sample size min_class_nrow*sam.rate
      sam.ctrl <- minority_class[sample(x = row.names(minority_class),size = min_class_nrow*sam.rate,replace=T),] 
      
      # Combining the oversampled rare class with the original dominant class
      oversamp_df <- rbind(sam.ctrl,majority_class)
      
      # Return the oversampled Dataframe
      return(oversamp_df)    
      
    }else if((class_vector[min_class_index] <= tolerance_minor) & (min_class_nrow > min_nrow_tolerance)){
      print(' I have to do undersampling')
      
      # Undersampling dominant class
      sam.ctrl2 <- majority_class[sample(x = row.names(majority_class),size = min_class_nrow,replace=F),] 
      
      # Combining the oversampled rare class with the original dominant class
      undersamp_df <- rbind(sam.ctrl2,minority_class)
      
      # Return the oversampled Dataframe
      return(undersamp_df) 
      
    }else if((class_vector[min_class_index] > tolerance_minor) & (min_class_nrow > min_nrow_tolerance)){
      return(dframe)
    }
  }else{
    return(dframe)
  }
}
